package edu.sandbox.stream.api.lambdaexpressions;

import java.util.Comparator;

public class AnonymousClassVsLambdaExpression {

    public static void main(String[] args) {
        new AnonymousClassVsLambdaExpression()
                .anonymousClassExample()
                .lambdaExpressionExample();
    }

    private AnonymousClassVsLambdaExpression anonymousClassExample() {
        int local = 20; // should be effectively final
        int field = 10;
        // will be generated by compiler
        Comparator<Integer> comparator = new Comparator<>() {
            private int field = 10; // shadowing

            @Override
            public int compare(Integer o1, Integer o2) {
//                this.compare(o1, o2); - this means anonymous Comparator class object
                return Integer.compare(o1, o2) + field + local;
            }

            @Override
            public boolean equals(Object obj) {
                return super.equals(obj);
            }
        };
        comparator.compare(1, 2);
        return this;
    }

    private AnonymousClassVsLambdaExpression lambdaExpressionExample() {
        int field = 20;
        int x = 10; // should be effectively final
        // will be generated at runtime by LambdaMetafactory
        Comparator<Integer> comparator = (a, b) -> {
            //  int field = 20; - compile error
            //  this.instanceMethod(); - this means AnonymousClassVsLambdaExpression object
            return Integer.compare(a, b) + x;
        }; // type will be identified from context
        comparator.compare(1, 2);
        return this;
    }

    private void instanceMethod() {
    }
}
